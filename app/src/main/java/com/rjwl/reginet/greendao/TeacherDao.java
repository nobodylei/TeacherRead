package com.rjwl.reginet.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rjwl.reginet.teacherread.entity.Teacher;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACHER".
*/
public class TeacherDao extends AbstractDao<Teacher, Long> {

    public static final String TABLENAME = "TEACHER";

    /**
     * Properties of entity Teacher.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TeacherId = new Property(0, long.class, "teacherId", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Userame = new Property(2, String.class, "userame", false, "USERAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property Schoolname = new Property(6, String.class, "schoolname", false, "SCHOOLNAME");
        public final static Property CardID = new Property(7, String.class, "cardID", false, "CARD_ID");
        public final static Property ClassID = new Property(8, int.class, "classID", false, "CLASS_ID");
        public final static Property GradeID = new Property(9, int.class, "gradeID", false, "GRADE_ID");
        public final static Property SchoolID = new Property(10, int.class, "schoolID", false, "SCHOOL_ID");
        public final static Property Teachercard = new Property(11, String.class, "teachercard", false, "TEACHERCARD");
    }


    public TeacherDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACHER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: teacherId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"USERAME\" TEXT," + // 2: userame
                "\"PASSWORD\" TEXT," + // 3: password
                "\"NAME\" TEXT," + // 4: name
                "\"GENDER\" TEXT," + // 5: gender
                "\"SCHOOLNAME\" TEXT," + // 6: schoolname
                "\"CARD_ID\" TEXT," + // 7: cardID
                "\"CLASS_ID\" INTEGER NOT NULL ," + // 8: classID
                "\"GRADE_ID\" INTEGER NOT NULL ," + // 9: gradeID
                "\"SCHOOL_ID\" INTEGER NOT NULL ," + // 10: schoolID
                "\"TEACHERCARD\" TEXT);"); // 11: teachercard
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Teacher entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTeacherId());
        stmt.bindLong(2, entity.getId());
 
        String userame = entity.getUserame();
        if (userame != null) {
            stmt.bindString(3, userame);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String schoolname = entity.getSchoolname();
        if (schoolname != null) {
            stmt.bindString(7, schoolname);
        }
 
        String cardID = entity.getCardID();
        if (cardID != null) {
            stmt.bindString(8, cardID);
        }
        stmt.bindLong(9, entity.getClassID());
        stmt.bindLong(10, entity.getGradeID());
        stmt.bindLong(11, entity.getSchoolID());
 
        String teachercard = entity.getTeachercard();
        if (teachercard != null) {
            stmt.bindString(12, teachercard);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Teacher entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTeacherId());
        stmt.bindLong(2, entity.getId());
 
        String userame = entity.getUserame();
        if (userame != null) {
            stmt.bindString(3, userame);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String schoolname = entity.getSchoolname();
        if (schoolname != null) {
            stmt.bindString(7, schoolname);
        }
 
        String cardID = entity.getCardID();
        if (cardID != null) {
            stmt.bindString(8, cardID);
        }
        stmt.bindLong(9, entity.getClassID());
        stmt.bindLong(10, entity.getGradeID());
        stmt.bindLong(11, entity.getSchoolID());
 
        String teachercard = entity.getTeachercard();
        if (teachercard != null) {
            stmt.bindString(12, teachercard);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Teacher readEntity(Cursor cursor, int offset) {
        Teacher entity = new Teacher( //
            cursor.getLong(offset + 0), // teacherId
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userame
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // schoolname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cardID
            cursor.getInt(offset + 8), // classID
            cursor.getInt(offset + 9), // gradeID
            cursor.getInt(offset + 10), // schoolID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // teachercard
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Teacher entity, int offset) {
        entity.setTeacherId(cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setUserame(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSchoolname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCardID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClassID(cursor.getInt(offset + 8));
        entity.setGradeID(cursor.getInt(offset + 9));
        entity.setSchoolID(cursor.getInt(offset + 10));
        entity.setTeachercard(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Teacher entity, long rowId) {
        entity.setTeacherId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Teacher entity) {
        if(entity != null) {
            return entity.getTeacherId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Teacher entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
